name: Build TrashCat

on:
  workflow_dispatch:
    inputs:
      windows:
        description: 'Build for Windows'
        type: boolean
        default: false
      macos:
        description: 'Build for macOS'
        type: boolean
        default: false
      android:
        description: 'Build for Android'
        type: boolean
        default: false
      webgl:
        description: 'Build for WebGL'
        type: boolean
        default: false
      branch:
        description: 'Branch to checkout for AltTester submodule'
        default: 'development'
        required: true

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  get-selected-platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix
        id: set-matrix
        run: |
          platforms=()
          if ${{ github.event.inputs.windows }}; then platforms+=("windows"); fi
          if ${{ github.event.inputs.macos }}; then platforms+=("macos"); fi
          if ${{ github.event.inputs.android }}; then platforms+=("android"); fi
          if ${{ github.event.inputs.webgl }}; then platforms+=("webgl"); fi

          json=""
          sep=""
          for platform in "${platforms[@]}"; do
            case "${platform,,}" in
              windows) os='["self-hosted", "Windows", "product"]'; plat='Windows' ;;
              macos) os='["self-hosted", "MAC37"]'; plat='macOS' ;;
              android) os='["self-hosted", "MAC37"]'; plat='Android' ;;
              webgl) os='["self-hosted", "MAC37"]'; plat='WebGL' ;;
              *) continue ;;
            esac
            json="${json}${sep}{\"platform\":\"$plat\",\"os\":$os}"
            sep=","
          done

          echo "matrix=[${json}]" >> $GITHUB_OUTPUT

  build:
    needs: get-selected-platforms
    strategy:
      matrix:
        include: ${{ fromJson(needs.get-selected-platforms.outputs.platforms) }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Update Submodules
        run: |
          git submodule foreach --recursive git reset --hard
          git submodule foreach --recursive git clean -fd
          git submodule update --init --recursive
        
      - name: Checkout AltTester Submodule Branch
        shell: bash
        run: |
          cd TrashCat/Assets/AltTester-Unity-SDK
          git fetch
          git checkout "${{ github.event.inputs.branch || 'development' }}"
          git pull --rebase origin "${{ github.event.inputs.branch || 'development' }}"

      - name: Build TrashCat
        run: |
          export ALTSERVER_PORT=13000
          export ALTSERVER_HOST="192.168.11.35"

          if [ "${{ matrix.platform }}" = "Windows" ]; then
            "$UNITY_2021_3_HOME" -batchmode -stackTraceLogType None -projectPath $GITHUB_WORKSPACE/TrashCat -executeMethod BuildTrashCat.WindowsBuildFromCommandLine -logFile buildWindows.log -quit
          elif [ "${{ matrix.platform }}" = "macOS" ]; then
            $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath $CI_PROJECT_DIR/TrashCat -executeMethod BuildTrashCat.MacBuildFromCommandLine -logFile buildMac.log -quit
          elif [ "${{ matrix.platform }}" = "Android" ]; then
            $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath $CI_PROJECT_DIR/TrashCat -executeMethod BuildTrashCat.AndroidBuildFromCommandLine -logFile buildAndroid.log -quit
          elif [ "${{ matrix.platform }}" = "WebGL" ]; then
            $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath $CI_PROJECT_DIR/TrashCat -executeMethod BuildTrashCat.WebGLBuildFromCommandLine -logFile buildWebGL.log -quit
          fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Build-${{ matrix.platform }}-Artifact
          path: |
            **/*.log
            **/TrashCatBuild/*
            **/TrashCat.apk
            **/TrashCat.app
            **/build/webgl


  # build-iOS:
  #   runs-on: [self-hosted, MAC37]
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: "recursive"

  #     - name: Checkout Submodules to Development Branch
  #       run: |
  #         git submodule foreach --recursive git fetch origin
  #         git submodule foreach --recursive git checkout development --force
  #         git submodule foreach --recursive git pull origin development

  #     - name: Build TrashCat
  #       run: |
  #         export ALTSERVER_PORT=13000
  #         export ALTSERVER_HOST="192.168.11.35"
  #         $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath $CI_PROJECT_DIR/TrashCat -executeMethod BuildTrashCat.IosBuildFromCommandLine -logFile buildiOS.log -quit
  #         xcodebuild -project ./TrashCat/TrashCat/Unity-iPhone.xcodeproj -scheme Unity-iPhone -archivePath Unity-iPhone.xcarchive archive
  #         xcodebuild -exportArchive -archivePath ./Unity-iPhone.xcarchive -exportOptionsPlist $EXPORT_OPTIONS_LOCATION/export-options.plist -exportPath ./
  #         osascript -e 'tell app "Xcode" to quit'

  #     - uses: actions/upload-artifact@v4
  #       if: always() # run this step even if one of the previous steps failed
  #       with:
  #         name: BuildiOSArtifact
  #         path: |
  #           **/TrashCat.ipa
  #           **/*.log